{"version":3,"sources":["components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Game","useState","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAiFeA,MA7Ef,WACE,IADe,EAESC,mBAAS,KAFlB,gCAGsBA,mBAAS,KAH/B,8BCSFC,E,iLARX,OACE,kBAAC,EAAD,U,GAHYC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7df3197f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Box from '../Box/box'\nimport './style.css'\n\nfunction Game () {\n  const board = [[], [], []]\n  const [turn, setTurn] = useState('X')\n  const [winnertext, setWinningText] = useState('')\n\n  function changeTurn (row, col) {\n    board[row][col] = turn\n\n    setTurn(turn => turn === 'X' ? 'O' : 'X')\n    // console.log(board)\n    const winnerIs = checkTheWinner()\n\n    if (!winnerIs) {\n      // nothing\n    } else {\n      setWinningText(winnerIs + 'won !')\n    }\n  }\n\n  function checkTheWinner () {\n    // ROW TEST\n    for (let i = 0; i < board.length; i++) {\n      const row = board[i]\n      if (row[0] === row[1] && row[1] === row[2] && row[0]) {\n        return row[0]\n      }\n      // COLUMN TEST\n      for (let i = 0; i < board.length; i++) {\n        const element1 = board[0][i]\n        const element2 = board[1][i]\n        const element3 = board[2][i]\n        if (element1 === element2 && element2 === element3 && element1) {\n          return element1\n        }\n      }\n      // DIAGONAL TEST\n      const diagonal1 = board[0][0]\n      const diagonal2 = board[1][1]\n      const diagonal3 = board[2][2]\n\n      if (diagonal1 === diagonal2 && diagonal2 === diagonal3 && diagonal1) {\n        return diagonal1\n      }\n\n      const p1 = board[0][2]\n      const p2 = board[1][1]\n      const p3 = board[2][0]\n\n      if (p1 === p2 && p2 === p3 && p1) {\n        return p1\n      }\n      return false\n    }\n\n    return (\n      <div id='game'>\n        <div id='winner-text'>{winnertext}</div>\n        <div className='row'>\n          <Box row={0} col={0} currentState={turn} changeTurn={changeTurn} />\n          <Box row={0} col={1} currentState={turn} changeTurn={changeTurn} />\n          <Box row={0} col={2} currentState={turn} changeTurn={changeTurn} />\n        </div>\n        <div className='row'>\n          <Box row={1} col={0} currentState={turn} changeTurn={changeTurn} />\n          <Box row={1} col={1} currentState={turn} changeTurn={changeTurn} />\n          <Box row={1} col={2} currentState={turn} changeTurn={changeTurn} />\n        </div>\n        <div className='row'>\n          <Box row={2} col={0} currentState={turn} changeTurn={changeTurn} />\n          <Box row={2} col={1} currentState={turn} changeTurn={changeTurn} />\n          <Box row={2} col={2} currentState={turn} changeTurn={changeTurn} />\n        </div>\n      </div>\n    )\n  } \n}\n\nexport default Game\n","import React,{Component} from 'react'\nimport Game from \"./components/Game/Game\";\n\nclass App extends Component {\n  render(){\n    return(\n      <Game />\n    )\n  }\n}\n\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}